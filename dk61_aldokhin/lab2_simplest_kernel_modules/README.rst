=================================================
**Лабораторная работа №2 Простейший модуль ядра**
=================================================

Тема: Попробавть собрать и запустить модуль ядра Linux
---------------------------------

Цель: Научиться компилировать и собирать модули ядра Linux
------------------------------------

Структура директории (Directory structure)
-------------------------------------------
+-------------------+----------------------------------+ 
| Папка и файлы     |            Описание              |
+===================+==================================+ 
|        src        | Исходный код лабораторной работы |
+-------------------+----------------------------------+ 
|       Makefile    |     Файл для компиляции проекта  | 
+-------------------+----------------------------------+ 
|       README.rst  | Отчет о лабораторной работе      |
+-------------------+----------------------------------+

**Задание:**
~~~~
* Найти и загрузить файл заголовка пакетов ядра
* Собрать модуль из примера
* Протестировать его и посмотреть время выполнения его
* Проделать те же операции со своим модулем

В проекте используються библиотеки:
~~~~
* ``<linux/module.h>`` требуется для всех модулей
* ``<linux/kernel.h>`` требуется для системной информации
* ``<linux/init.h>`` используется для инициализации и закрытия модуля
* ``<linux/jiffies.h>`` для расчета колличеста тактов процессора
* ``<linux/interrupt.h>`` используется для задач

**Ход работы:**
-----------

Модуль ядра имеет приоритет перед пользовательскими приложениями. У модуля ядра есть три варианта:
~~~~
* Вне очереди
* Высокий приоритет
* низкий приоритет

**Разберем код:**

``MODULE_DESCRIPTION`` нужен для описания модуля ядра, обычно это последовательное перечисление атрибутов.

``MODULE_AUTHOR`` указание авторства.

``MODULE_VERSION`` версия модуля.

``MODULE_LICENSE`` тип лицензии, мы указали двойную ``DualMIT/GPL`` это хорошо тем, что действует одна, а если мы выходим за  рамки, то
начитает действовать другая, и их области действия плюсуються.

``module_param`` функция параметра модуля и имеет три параметра: имя, тип данных, права доступа.

+------------------------------------------------------------------------------------------------------------------------------------+
|    **Три варианта записи прав пользователя**                                                                                       |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| двоичная               | восьмеричная             | символьная             | права на файл            | права на каталог           |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 000                    | 0                        | ---                    | нет                      | нет                        |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 001                    | 1                        | --x                    | выполнение               | чтение файлов и их свойств |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 010                    | 2                        | -w-                    | запись                   | нет                        |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 011                    | 3                        | -wx                    | запись и выполнение      | всё, 001                   |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 100                    | 4                        | r--                    | чтение                   | чтение имён файлов         |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 101                    | 5                        | r-x                    | чтение и выполнение      | доступ на чтение           |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 110                    | 6                        | rw-                    | чтение и запись          | чтение имён файлов         |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+
| 111                    | 7                        | rwx                    | все права                | все права                  |
+------------------------+--------------------------+------------------------+--------------------------+----------------------------+

``printk`` используется для вывода информации в консоль, имеет макросы:
~~~~
* ``KERN_EMERG`` - Система не используется
* ``KERN_ALERT`` - Действие должно быть принято немедленно
* ``KERN_CRIT`` - Критические условия
* ``KERN_ERR`` - Условия ошибки
* ``KERN_WARNING`` - Условия предупреждения
* ``KERN_NOTICE`` - Нормальное, но значимое состояние
* ``KERN_INFO`` - информационный
* ``KERN_DEBUG`` - Сообщения уровня отладки

Мы использывали ``KERN_INFO``

``DECLARE_TASKLET`` - используется для объявления тасклита, передаем функцию ``tasklet_handler``, первый параметр - имя, третий параметр - параметры переданные в функцию, в нашем случае ``NULL``.

``__init firstmod_init`` - инициализация тасклита.

``__exit firstmod_exit`` - закрытие тасклита.

``tasklet_schedule`` - вызываем в инициализации для того, что бы нечего не мешало системе при выполенении задачи, тасклита.

``tasklet_kill`` - убивает задачу(тасклит).

Мы сохраняем ввод имени пользователя ``static char * user = "$ username"``. Установить ``user = <name>`` в терминале ``module_param (user, charp, S_IRUGO)``.

Сборка и тестирование модуля 
---------------------------
Для сборки, в которой этот модуль использует ``make`` (для следующих команд требуется **root-доступ**). Для вставки используйте ``insmod <имя_модуля>``. Для удаления используйте ``rmmod <имя_модуля>``. Для отображения журнала ядра используйте ``dmesg -k``.

Вывод
----

Был собран и проверен модуль ядра. Убедились в его выполнении. Изменение jiffies не наблюдалось, так как задача выполнялась очень быстро и мы не папали на переключение счетчика.




